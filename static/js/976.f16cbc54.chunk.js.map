{"version":3,"file":"static/js/976.f16cbc54.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","components/Container/Container.styled.jsx","redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { Div } from './Container.styled';\nimport PropTypes from 'prop-types';\nconst Container = ({ children }) => <Div> {children}</Div>;\n\nContainer.propTypes = {\n  children: PropTypes.any.isRequired,\n};\n\nexport default Container;\n","import styled from '@emotion/styled';\n\nexport const Div = styled.div`\n  @media screen and (min-width: 0px) {\n    max-width: 444px;\n  }\n\n  margin: 0 auto;\n  padding-right: 16px;\n  padding-left: 16px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const SecondTitle = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.value;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n\n  return contacts?.filter(contact =>\n    contact?.name?.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n","import { Formik, Field } from 'formik';\nimport toast, { Toaster } from 'react-hot-toast';\nimport * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { TextField, Button } from '@mui/material';\n\nconst ContactSchema = Yup.object({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Name is required!'),\n  number: Yup.string().phone('UA').required('Phone number is required!'),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <>\n      <Toaster />\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={ContactSchema}\n        onSubmit={({ ...values }, actions) => {\n          const existingContact = contacts.find(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          );\n          if (existingContact) {\n            toast.error(\n              `You already have ${existingContact.name} in your contacts`\n            );\n            actions.resetForm();\n          } else {\n            dispatch(addContact({ ...values }));\n            actions.resetForm();\n          }\n        }}\n      >\n        {({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>\n            <Field name=\"name\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField\n                  {...field}\n                  label=\"name\"\n                  variant=\"outlined\"\n                  error={touched.name && Boolean(errors.name)}\n                  helperText={touched.name && errors.name}\n                  fullWidth\n                  margin=\"normal\"\n                  autoComplete=\"off\"\n                  size=\"small\"\n                />\n              )}\n            </Field>\n\n            <Field name=\"number\">\n              {({ field, form: { touched, errors } }) => (\n                <TextField\n                  {...field}\n                  label=\"Number\"\n                  variant=\"outlined\"\n                  error={touched.number && Boolean(errors.number)}\n                  helperText={touched.number && errors.number}\n                  fullWidth\n                  margin=\"normal\"\n                  autoComplete=\"off\"\n                  size=\"small\"\n                  sx={{ mb: 2 }}\n                />\n              )}\n            </Field>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              sx={{ mb: 4 }}\n              fullWidth\n            >\n              Add contact\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n\n  align-items: center;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n  border-radius: 5px;\n  padding: 10px;\n\n  &:not(:last-of-type) {\n    margin-bottom: 10px;\n  }\n\n  &:hover {\n    background-color: gainsboro;\n  }\n`;\n","import { FaTrashAlt } from 'react-icons/fa';\nimport { ContactItem } from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <ul>\n      {contacts?.map(({ name, number, id }) => {\n        return (\n          <ContactItem key={id}>\n            <span\n              style={{\n                flexGrow: '2',\n              }}\n            >\n              {name}\n            </span>\n            <span\n              style={{\n                marginRight: '10px',\n              }}\n            >\n              {number}\n            </span>\n\n            <FaTrashAlt\n              aria-label=\"delete-icon\"\n              style={{\n                cursor: 'pointer',\n                color: 'crimson',\n              }}\n              onClick={() => {\n                handleDelete(id);\n              }}\n            />\n          </ContactItem>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: block;\n  margin-bottom: 10px;\n`;\nexport const FilterInput = styled.input`\n  display: block;\n  height: 25px;\n  margin-bottom: 20px;\n\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 5px;\n`;\n","import { nanoid } from 'nanoid';\nimport { FilterLabel, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { updateFilter } from 'redux/contacts/filterSlice';\n\nconst inputId = nanoid();\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <FilterLabel htmlFor={inputId}>Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        value={value}\n        id={inputId}\n        onChange={e => dispatch(updateFilter(e.target.value))}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import Container from 'components/Container/Container';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader';\nimport { MainTitle, SecondTitle } from 'components/Container/Container.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <MainTitle>Phonebook</MainTitle>\n      <ContactForm />\n      <SecondTitle>Contacts</SecondTitle>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["children","Div","styled","MainTitle","SecondTitle","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","value","selectVisibleContacts","contact","name","toLowerCase","includes","ContactSchema","Yup","min","max","required","number","phone","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","actions","values","existingContact","find","toast","resetForm","addContact","handleSubmit","field","form","touched","errors","TextField","label","variant","Boolean","helperText","fullWidth","margin","autoComplete","size","sx","mb","Button","type","color","ContactItem","map","id","style","flexGrow","marginRight","cursor","onClick","deleteContact","handleDelete","FilterLabel","FilterInput","inputId","nanoid","htmlFor","onChange","e","updateFilter","target","ContactsPage","useEffect","fetchContacts","Container","Loader"],"sourceRoot":""}